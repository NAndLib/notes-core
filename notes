#!/bin/bash

# Find the real path of the source file.
NOTES_SOURCE="${BASH_SOURCE[0]}"
# resolve $SOURCE until the file is no longer a symlink.
while [ -h "$NOTES_SOURCE" ]; do
  TARGET="$(readlink "$NOTES_SOURCE")"
  if [[ $TARGET == /* ]]; then
    NOTES_SOURCE="$TARGET"
  else
    NOTES_DIR="$(dirname "$NOTES_SOURCE")"
    # in case $NOTES_SOURCE was a relative symlink.
    NOTES_SOURCE="$NOTES_DIR/$TARGET"
  fi
done

NOTES_SRC_DIR="$(cd -P "$(dirname "$NOTES_SOURCE")" > /dev/null 2>&1 && pwd)"
NOTES_ENTRY_DIR="${NOTES_SRC_DIR}/notes.d"

git-command() {
  pushd "${NOTES_SRC_DIR}"
  (set -x ; git "$@")
  popd
}

print_help() {
  cat <<EOT
Usage: notes (command|filename)

Commands:
  help (-h) (--help)    Prints this help message.
  list (ls)             List all note files in order of most recently modified.
  open                  Opens generated PDF file of notes.
  edit                  Edits the most recently edited note.
  git [git-command], status, push, pull, commit
                        Runs specified git command on the notes directory.
  make [target]         Runs specified make target on the notes directory.

EOT
}

set -e
case "${1:-help}" in
  help|-h|--help)
    print_help
    ;;
  list|ls)
    echo "${NOTES_ENTRY_DIR}"
    ls -1t "${NOTES_ENTRY_DIR}"
    ;;
  open)
    xdg-open "${NOTES_SRC_DIR}/out/notes.pdf"
    ;;
  git)
    shift
    git-command "$@"
    ;;
  status)
    git-command "status"
    ;;
  push)
    git-command "push"
    ;;
  pull)
    git-command "pull"
    ;;
  commit)
    git-command "$@"
    ;;
  make)
    shift
    make --no-print-directory -C "${NOTES_SRC_DIR}" "${@:-all}" check-privacy
    ;;
  --*|-*)
    echo "Unknown command: $1."
    print_help
    ;;
  edit)
    EDIT_NOTE="true"
    ;&
  *)
    if [[ "${EDIT_NOTE:-false}" == "true" ]]; then
      # The most recently edited note file will be opened.
      NOTE_NAME=$(ls -1t "${NOTES_ENTRY_DIR}" | head -1)
    else
      NOTE_NAME="$1.tex"
    fi

    "${EDITOR:-vim}" "${NOTES_ENTRY_DIR}/${NOTE_NAME}"
esac
